---
title: "Practical Day 2"
format: html
author: "Yastika Motilal"
date: "2025-02-08"
---

# Question 1

Setting the seed

```{r}
library(quarto)
set.seed(1)
```

Creating the x variable

```{r}
x <- seq(1, 100)
```

Creating the y variable

```{r}
y <- sin(x/10) + rnorm(100, 0, (0.2)^2)
```

# Question 2

Create a function that performs similarly to lowess{} using the steps provided

```{r}
customLowess <- function(x, y, f) {
  n <- length(x) 
  # step 2
  k <- ceiling(f * n)  
  
  # using a vector for smoothed y values
  y_smooth <- numeric(n)
  
  # working out the distances between all the points
  for (i in seq_along(x)) {
    distances <- abs(x - x[i])
    
    nearest_neighbors <- order(distances)[1:k]
    
    d_max <- max(distances[nearest_neighbors])
    
    # calculating the weights (step 3) 
    weights <- (1 - (distances[nearest_neighbors] / d_max)^3)^3
    weights[distances[nearest_neighbors] >= d_max] <- 0  
    
    # Perform weighted linear regression 
    X <- cbind(1, x[nearest_neighbors])  
    W <- diag(weights)  # Diagonal matrix of weights
    beta <- solve(t(X) %*% W %*% X) %*% t(X) %*% W %*% y[nearest_neighbors]  # coefficients
    
    # Predict the smoothed value at x[i]
    y_smooth[i] <- beta[1] + beta[2] * x[i]
  }
  
  return(y_smooth)
}
```

# Question 3

First we will apply the customLowess() function to x and y and will use f = 2/3

```{r}
y_smooth <- customLowess(x, y, f = 2/3)
```

Now we will apply the lowess() function to x and y using the same value for f

```{r}
y_smooth_l <- lowess(x, y, f = 2/3, iter = 0)
```

Now we will plot the two smoothed lines and compare them

```{r}
plot(x, y, main = "Lowess Smoothing", col = "gray", pch = 16)
lines(x, y_smooth, col = "blue", lwd = 2)
lines(y_smooth_l, col = "red", lwd = 2)
```

It seems from the plot that the lowess() and csutomLowess() function lines are almost together, showing that they both produce similar results, and hence is consistent.
